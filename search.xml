<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Phalcon框架的Model连续进行两次save操作不能保存数据库非0或非空默认值问题的探讨</title>
    <url>/2017/01/25/phalcom-model-double-save/</url>
    <content><![CDATA[<p>使用MySQL数据库，有些字段设置为NOT NULL，默认值非0或非空字符串，如果用Phalcon的Model连续进行两次save()操作(第二次操作需要用到第一次生成的id，所以不能合并成一次，本文中是pid字段是根据id字段生成的，确保二者的一一对应关系)，并且没有指定这些字段的值，最终的结果是这些字段的值变成了0或空字符串，而不是数据库里设置的默认值。</p>
<a id="more"></a>
<h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>数据表定义：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`pid`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'产品id'</span>,</span><br><span class="line">  <span class="string">`type`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'类型id'</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'状态'</span>,</span><br><span class="line">  <span class="string">`provider`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'zlc'</span> <span class="keyword">COMMENT</span> <span class="string">'供应商'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'名称'</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">decimal</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'价格'</span>,</span><br><span class="line">  <span class="string">`quantity`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'数量'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'产品'</span></span><br></pre></td></tr></table></figure></p>
<p>代码层面，在Product.php里预先定义好了所有的列,并且去掉Model对于not null的验证：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">extends</span> \<span class="title">Phalcon</span>\<span class="title">Mvc</span>\<span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $id;</span><br><span class="line">    <span class="keyword">public</span> $pid;</span><br><span class="line">    <span class="keyword">public</span> $type;</span><br><span class="line">    <span class="keyword">public</span> $status;</span><br><span class="line">    <span class="keyword">public</span> $provider;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">    <span class="keyword">public</span> $price;</span><br><span class="line">    <span class="keyword">public</span> $quantity;</span><br><span class="line">    <span class="keyword">public</span> $create_time;</span><br><span class="line">    <span class="keyword">public</span> $update_time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在模型初始化的时候设置模型不用进行not null验证，当模型比较多时可以在BaseModel中进行设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//去掉model对于not null的验证</span></span><br><span class="line">        Phalcon\Mvc\Model::setup([<span class="string">'notNullValidations'</span> =&gt; <span class="keyword">false</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取模型字符串错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getErrorAsString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $error_str = join(<span class="string">';'</span>, array_map(<span class="function"><span class="keyword">function</span> <span class="params">($v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $v-&gt;getMessage();</span><br><span class="line">        &#125;, <span class="keyword">$this</span>-&gt;getMessages()));</span><br><span class="line">        <span class="keyword">return</span> $error_str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>简单的逻辑代码在ProductController.php中给出：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> <span class="keyword">extends</span> \<span class="title">Phalcon</span>\<span class="title">Mvc</span>\<span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个product</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;request-&gt;isPost()) &#123;</span><br><span class="line">            $response = [</span><br><span class="line">                <span class="string">'code'</span> =&gt; <span class="number">1</span>,</span><br><span class="line">                <span class="string">'msg'</span> =&gt; <span class="string">'Post method is needed'</span>,</span><br><span class="line">            ];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response-&gt;setJsonContent($response);</span><br><span class="line">        &#125;</span><br><span class="line">        $product = <span class="keyword">new</span> Product();</span><br><span class="line">        $product-&gt;name = <span class="keyword">$this</span>-&gt;request-&gt;getPost(<span class="string">'name'</span>);</span><br><span class="line">        $product-&gt;price = <span class="keyword">$this</span>-&gt;request-&gt;getPost(<span class="string">'price'</span>);</span><br><span class="line">        $product-&gt;quantity = <span class="keyword">$this</span>-&gt;request-&gt;getPost(<span class="string">'quantity'</span>, <span class="string">'int'</span>, <span class="number">0</span>);</span><br><span class="line">        $succ = $product-&gt;save();</span><br><span class="line">        <span class="keyword">if</span> (!$succ) &#123;</span><br><span class="line">            error_log(<span class="keyword">__METHOD__</span> . <span class="string">' something went wrong:'</span> . $product-&gt;getErrorAsString());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'创建product失败'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 为了不对外暴露产品id，生成一个与id唯一对应的pid暴露给外界，这里只是简单的拼接时间戳</span></span><br><span class="line">        $product-&gt;pid = $product-&gt;id . time();</span><br><span class="line">        $succ = $product-&gt;save();</span><br><span class="line">        <span class="keyword">if</span> ($succ) &#123;</span><br><span class="line">            $code = <span class="number">0</span>;</span><br><span class="line">            $msg = <span class="string">'Create the product successfully!'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            error_log(<span class="keyword">__METHOD__</span> . <span class="string">' something went wrong:'</span> . $product-&gt;getErrorAsString());</span><br><span class="line">            $code = <span class="number">1</span>;</span><br><span class="line">            $msg = <span class="string">'Fail to create the product'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $response = [</span><br><span class="line">            <span class="string">'code'</span> =&gt; $code,</span><br><span class="line">            <span class="string">'msg'</span> =&gt; $msg,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response-&gt;setJsonContent($response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过curl请求<a href="http://phalcon.zuolicong.com/product/create" target="_blank" rel="noopener">http://phalcon.zuolicong.com/product/create</a> 接口(我在本地把该项目的hosts设置成了phalcon.zuolicong.com)，命令如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -i -d &quot;name=computer&amp;price=6000.00&amp;quantity=2017&quot; http://phalcon.zuolicong.com/product/create</span><br></pre></td></tr></table></figure></p>
<p>请求成功，查看数据库结果如下：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog/Phalcon%E6%A1%86%E6%9E%B6%E7%9A%84Model%E4%B8%8D%E8%83%BD%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%9E0%E6%88%96%E9%9D%9E%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%BB%98%E8%AE%A4%E5%80%BC%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%A2%E8%AE%A8/curl%E8%AF%B7%E6%B1%82%E7%BB%93%E6%9E%9C.png" alt="curl请求结果"></p>
<p>没有传type、status、provider三个字段，但是数据库里保存的却不是这三个字段的默认值，这是怎么回事？</p>
<h2 id="使用psysh进行逐步操作以分析问题"><a href="#使用psysh进行逐步操作以分析问题" class="headerlink" title="使用psysh进行逐步操作以分析问题"></a>使用psysh进行逐步操作以分析问题</h2><p>使用psysh引入该项目的入口文件，直接通过Product Model进行逐步操作复现问题。先实例化一个Product，并对type、status、provider三个字段进行赋值，然后进行第一次save()操作，操作后发现type、status、provider三个字段的值都是null：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog/Phalcon%E6%A1%86%E6%9E%B6%E7%9A%84Model%E4%B8%8D%E8%83%BD%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%9E0%E6%88%96%E9%9D%9E%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%BB%98%E8%AE%A4%E5%80%BC%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%A2%E8%AE%A8/psysh%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BF%9D%E5%AD%98%E5%90%8E%E6%A8%A1%E5%9E%8B%E5%B1%9E%E6%80%A7%E5%80%BC.png" alt="psysh第一次保存后模型属性值"></p>
<p>此时数据库里的结果如下:<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog/Phalcon%E6%A1%86%E6%9E%B6%E7%9A%84Model%E4%B8%8D%E8%83%BD%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%9E0%E6%88%96%E9%9D%9E%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%BB%98%E8%AE%A4%E5%80%BC%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%A2%E8%AE%A8/psysh%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BF%9D%E5%AD%98%E5%90%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%9C.png" alt="psysh第一次保存后数据库结果"></p>
<p>可以看出第一次save()之后type、status、provider三个字段保存的都是默认值，那么问题应该就是出在第二次save()之后了。此时对该实例的pid字段进行赋值之后再进行第二次save()操作，果然这三个字段的值分别变成了0、NULL和空字符串。此时问题就明朗了，第一次save()之后实例未被赋值的字段默认为null，如果再进行一次save()操作（相当于update操作），由于type和provider设置了NOT NULL，更新为null值时MySQL会自动进行转换(此时MySQL的sql_mode不能设为STRICT_TRANS_TABLES，否则将不会进行转换，而是直接中止操作，参考<a href="http://keithlan.github.io/2015/07/14/mysql_error_1048/" target="_blank" rel="noopener">http://keithlan.github.io/2015/07/14/mysql_error_1048/</a> 和 <a href="http://xstarcd.github.io/wiki/MySQL/MySQL-sql-mode.html" target="_blank" rel="noopener">http://xstarcd.github.io/wiki/MySQL/MySQL-sql-mode.html</a> )，整型会转成0，字符串类型则转成空字符串(和null是有区别的)，实际上timestamp类型也会转成操作的当前时间，这点从create_time字段上就可以看出来，此外，如果将NULL插入具有AUTO_INCREMENT属性的整数列，将插入序列中的下一个编号。 而status没有设定NOT NULL，直接更新为null。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>知道了原因出在实例第一次save()之后没有被赋值的字段默认为null，想到了两个解决方案如下：</p>
<ol>
<li><p>首先想到的方案就是在第二次进行save()更新操作之前把未赋值的且数据库设置了非0或非空默认值的字段手动赋为默认值，这种方案虽然可行，但是比较麻烦，并且在代码层面赋了默认值，数据库设置的默认值就没有意义了;</p>
</li>
<li><p>第二个方案是利用save()方法的第二个参数$whiteList，我们来看一下save()方法的参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $whiteList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">($data = null, $whiteList = null)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>当设置了save()方法的$whiteList参数时，将只对$whiteList里面的字段进行操作，其它字段会忽略，即第二次save()操作改为如下形式：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$succ = $product-&gt;save([<span class="string">'pid'</span> =&gt; $product-&gt;id . time()], [<span class="string">'pid'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>这种方案理论上是可行的，然而实际测试结果是并没有什么卵用，不知道是Phalcon的bug还是别的什么原因，有待进一步考证。</p>
<h2 id="更新之关于解决方案的讨论"><a href="#更新之关于解决方案的讨论" class="headerlink" title="更新之关于解决方案的讨论"></a>更新之关于解决方案的讨论</h2><p>今天特地研究了一下Phalcon的源码，发现上述解决方案2中对save($data = null, $whiteList = null)函数的理解有误，该函数的运行原理是，如果$data为非空数组，则调用assign($data, $dataColumnMap = null, $whiteList = null)函数对模型的各个属性进行赋值，如果$whiteList参数存在，则只会对$whiteList中给出的属性进行赋值，然后进行插入（调用_doLowInsert()函数）或者更新（调用_doLowUpdate()函数）操作，对于不在$whiteList参数里的属性，虽然在assign()函数里没有赋值，最终也会进行操作，并不是像之前理解的只会insert或者update参数$whiteList里的字段。通过对源码的研究（相关源码注释参考下一节），我找到了两个比较合理且行之有效的方案:</p>
<h3 id="方案一-使用dynamic-update"><a href="#方案一-使用dynamic-update" class="headerlink" title="方案一. 使用dynamic update"></a>方案一. 使用dynamic update</h3><p>在模型里设置dynamic update，并在第二次save（实际上执行的是update操作）前设置快照数据。<br>Product.php里的initialize()函数改动如下：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">extends</span> \<span class="title">Phalcon</span>\<span class="title">Mvc</span>\<span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 去掉model对于not null的验证</span></span><br><span class="line">        Phalcon\Mvc\Model::setup([<span class="string">'notNullValidations'</span> =&gt; <span class="keyword">false</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用dynamic update</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;useDynamicUpdate(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ProductController.php里createAction()的核心代码如下：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> <span class="keyword">extends</span> \<span class="title">Phalcon</span>\<span class="title">Mvc</span>\<span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个product</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $product = <span class="keyword">new</span> Product();</span><br><span class="line">        $product-&gt;name = <span class="keyword">$this</span>-&gt;request-&gt;getPost(<span class="string">'name'</span>);</span><br><span class="line">        $product-&gt;price = <span class="keyword">$this</span>-&gt;request-&gt;getPost(<span class="string">'price'</span>);</span><br><span class="line">        $product-&gt;quantity = <span class="keyword">$this</span>-&gt;request-&gt;getPost(<span class="string">'quantity'</span>, <span class="string">'int'</span>, <span class="number">0</span>);</span><br><span class="line">        $succ = $product-&gt;save();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置快照数据，后面修改pid字段后和快照数据对比，就只有pid字段发生了改变，由于使用了dynamic update，只会更新pid字段。需要注意的是，启用dynamic update，只有查询数据库之后才会自动设置快照数据，我用的老版本创建和更新操作并不会自动设置快照数据，因此这里需要手动设置，未赋值的为null的字段也包含在快照数组中。新版本如果使用了dynamic update，创建和更新的时候也会自动设置快照数组，和这里手动设置的效果一样。</span></span><br><span class="line">        $product-&gt;setSnapshotData($product-&gt;toArray());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了不对外暴露产品id，生成一个与id唯一对应的pid暴露给外界，这里只是简单的拼接时间戳</span></span><br><span class="line">        $product-&gt;pid = $product-&gt;id . time();</span><br><span class="line"></span><br><span class="line">        $succ = $product-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="方案二-使用Phalcon-Db-Adapter-Pdo-Mysql类的updateAsDict-函数"><a href="#方案二-使用Phalcon-Db-Adapter-Pdo-Mysql类的updateAsDict-函数" class="headerlink" title="方案二. 使用Phalcon\Db\Adapter\Pdo\Mysql类的updateAsDict()函数"></a>方案二. 使用Phalcon\Db\Adapter\Pdo\Mysql类的updateAsDict()函数</h3><p>updateAsDict()函数可以更新指定的字段，忽略其它字段。对于第二次使用save()函数进行更新操作，实际上源码最终是使用Phalcon\Db\Adapter\Pdo\Mysql类的update()函数实现更新的，和updateAsDict()函数类似。ProductController.php里createAction()的核心代码如下：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> <span class="keyword">extends</span> \<span class="title">Phalcon</span>\<span class="title">Mvc</span>\<span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个product</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $product = <span class="keyword">new</span> Product();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里不用担心sql注入，Values assigned directly or via the array of attributes are escaped/sanitized according to the related attribute data type. So you can pass an insecure array without worrying about possible SQL injections.见https://docs.phalconphp.com/zh/latest/reference/models.html</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        $succ = $product-&gt;save(<span class="keyword">$this</span>-&gt;request-&gt;getPost(), [<span class="string">'name'</span>, <span class="string">'price'</span>, <span class="string">'quantity'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取一个Phalcon\Db\Adapter\Pdo\Mysql实例</span></span><br><span class="line">        $connection = $product-&gt;getWriteConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要更新的字段，为了不对外暴露产品id，生成一个与id唯一对应的pid暴露给外界，这里只是简单的拼接时间戳</span></span><br><span class="line">        $updateData = [<span class="string">'pid'</span> =&gt; $product-&gt;id . time()];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行更新操作</span></span><br><span class="line">        $succ = $connection-&gt;updateAsDict(<span class="string">'product'</span>, $updateData, <span class="string">'id='</span> . $product-&gt;id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="cphalcon相关源码注释"><a href="#cphalcon相关源码注释" class="headerlink" title="cphalcon相关源码注释"></a>cphalcon相关源码注释</h2><p>cphalcon相关源码注释见<a href="https://github.com/zuolicong/cphalcon/blob/master/phalcon/mvc/model.zep" target="_blank" rel="noopener">https://github.com/zuolicong/cphalcon/blob/master/phalcon/mvc/model.zep</a> (中文是本人加的注释)，主要涉及到save(),assign(),_doLowInsert()和_doLowInsert()几个函数，如果文件不方便看也可结合commit内容看<a href="https://github.com/zuolicong/cphalcon/commit/d1787d406aa0a1600c78f04a1207f520071169db" target="_blank" rel="noopener">https://github.com/zuolicong/cphalcon/commit/d1787d406aa0a1600c78f04a1207f520071169db</a>。</p>
]]></content>
      <categories>
        <category>Phalcon</category>
      </categories>
      <tags>
        <tag>Phalcon</tag>
        <tag>cphalcon</tag>
        <tag>MySQL</tag>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>Phalcon框架中添加日志</title>
    <url>/2016/01/05/phalcon-log/</url>
    <content><![CDATA[<p>日志可以在程序出现bug时帮助排查问题，如果没有日志在解决bug时很可能无从下手。这两天修改了一个发邮件的功能，期间在自测代码的时候对日志接触的比较多，也意识到其重要性，在这里小结一下。由于公司使用的是Phalcon框架，因此这篇文章主要说说在Phalcon框架下添加日志。</p>
<a id="more"></a>
<h2 id="在Phalcon框架下添加日志"><a href="#在Phalcon框架下添加日志" class="headerlink" title="在Phalcon框架下添加日志"></a>在Phalcon框架下添加日志</h2><p>Phalcon框架下添加日志的方法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以添加不同级别的日志</span></span><br><span class="line">\Phalcon\DI::getDefault()-&gt;getLog()-&gt;critical(<span class="string">"message"</span>);   <span class="comment">//critical级别日志</span></span><br><span class="line">\Phalcon\DI::getDefault()-&gt;getLog()-&gt;emergency(<span class="string">"message"</span>);  <span class="comment">//emergency级别日志</span></span><br><span class="line">\Phalcon\DI::getDefault()-&gt;getLog()-&gt;fatal(<span class="string">"message"</span>);      <span class="comment">//fatal级别日志</span></span><br><span class="line">\Phalcon\DI::getDefault()-&gt;getLog()-&gt;debug(<span class="string">"message"</span>);      <span class="comment">//debug级别日志</span></span><br><span class="line">\Phalcon\DI::getDefault()-&gt;getLog()-&gt;error(<span class="string">"message"</span>);      <span class="comment">//error级别日志</span></span><br><span class="line">\Phalcon\DI::getDefault()-&gt;getLog()-&gt;info(<span class="string">"message"</span>);       <span class="comment">//只记录相关信息，不给出错误级别，也可能没有错误</span></span><br><span class="line">\Phalcon\DI::getDefault()-&gt;getLog()-&gt;notice(<span class="string">"message"</span>);     <span class="comment">//notice级别日志</span></span><br><span class="line">\Phalcon\DI::getDefault()-&gt;getLog()-&gt;warning(<span class="string">"message"</span>);    <span class="comment">//warning级别日志</span></span><br><span class="line">\Phalcon\DI::getDefault()-&gt;getLog()-&gt;alert(<span class="string">"message"</span>);      <span class="comment">//alert级别日志</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以直接使用log()方法，加一个表示错误级别的常量参数（可省略）</span></span><br><span class="line">\Phalcon\DI::getDefault()-&gt;getLog()-&gt;log(<span class="string">"message"</span>[,ERROR LEVEL]);</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1中的发邮件功能在线上环境时可以这样添加日志</span></span><br><span class="line">$to = <span class="string">'zuolicong@foxmail.com'</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($areaAttachs <span class="keyword">as</span> $city =&gt; $attachs) &#123;</span><br><span class="line">    $title = $city . <span class="string">"IM响应记录\r\n"</span>;</span><br><span class="line">    $body = <span class="string">"附件为"</span> . $city . <span class="string">"IM响应记录\r\n"</span>;</span><br><span class="line">    $mailTarget = <span class="keyword">$this</span>-&gt;getAreaMailer($city);</span><br><span class="line">    <span class="keyword">if</span> ($mailTarget) &#123;                            <span class="comment">//收件人存在</span></span><br><span class="line">        $mailTarget = explode(<span class="string">','</span>,$mailTarget);</span><br><span class="line">        $ret = Lib\Email::send($to, $title, $body, (<span class="keyword">array</span>) $mailTarget, $attachs);</span><br><span class="line">        \Phalcon\DI::getDefault()-&gt;getLog()-&gt;info(date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">" send mail to:&#123;$to&#125; city:&#123;$city&#125; ret:"</span> . json_encode($ret));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//邮件发送失败的日志</span></span><br><span class="line">        \Phalcon\DI::getDefault()-&gt;getLog()-&gt;info(date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">" cant not found mail receiver city:&#123;$city&#125;"</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加error级别的日志</span></span><br><span class="line"><span class="keyword">if</span> ($ins-&gt;save()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    \Phalcon\DI::getDefault()-&gt;getLog()-&gt;error(<span class="keyword">__method__</span> . <span class="string">" error with message:"</span> . $ins-&gt;getErrorAsString());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正常情况下Phalcon日志会自动记录时间，但是在命令行运行不会记录，如果要在命令行运行或测试代码，例如执行定时脚本任务等，可以记录时间，这样便于在出错时尽快找出原因所在。此外，如果想要日志直接在终端输出，可以在函数的第一行加上下面这种用法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">\Phalcon\DI::getDefault()-&gt;getLog()-&gt;toConsole=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>Phalcon日志详细用法可以参考：<a href="https://docs.phalconphp.com/zh/latest/reference/logging.html" target="_blank" rel="noopener">日志记录（Logging） — Phalcon 2.0.8 文档 - Phalcon PHP</a></p>
<h2 id="在哪里添加日志比较合适"><a href="#在哪里添加日志比较合适" class="headerlink" title="在哪里添加日志比较合适"></a>在哪里添加日志比较合适</h2><p>一般来说容易出错的函数最好添加日志，便于排查问题，例如上述的发邮件函数。在开发的时候有些地方不知道是否容易出错，但是后续过程中如果出现了bug，就会知道哪些地方容易出错，可以加上日志。还是以发邮件功能为例，突然有一天南京那边的分公司说没有收到邮件，但是其它的分公司都收到了（后面发现有少数几家分公司也没有收到邮件，只是没有在意而已），经排查发现原来是生成邮件附件时出问题了，附件内容用iconv(“UTF-8”, “GB2312”, $contents)函数进行字符编码转换时$contents含有特殊字符转换失败，iconv()函数返回false，导致附件内容为空，邮件不发送，在修复了这个bug之后给iconv()函数添加了日志如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">createAttach</span><span class="params">($fileName, $contents)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$contents) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $contents = iconv(<span class="string">"UTF-8"</span>, <span class="string">"GB18030//IGNORE"</span>, $contents);  <span class="comment">//忽略特殊字符</span></span><br><span class="line">    <span class="keyword">if</span>($contents)&#123;</span><br><span class="line">        <span class="keyword">return</span> file_put_contents($fileName, $contents);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        \Phalcon\DI::getDefault()-&gt;getLog()-&gt;info(date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">" 字符编码转换失败！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是file_put_contents()函数也容易出错从而返回false，因此这里选择给file_put_contents()函数添加日志也是可以的。此外在次数不是很多的循环中可以添加日志，这样可以知道每条是否执行成功。</p>
<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>日志一般在/tmp/或者/apps/log/文件夹里，假如我们要查看的日志文件为daily_mail.log，可以使用tail命令查看最近的日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f daily_mail.log</span><br></pre></td></tr></table></figure>
<p>或者先用less命令打开日志文件，再shift+g跳到日志末尾，然后用k/j进行上/下翻动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">less daily_mail.log</span><br></pre></td></tr></table></figure>
<p>如果需要查找包含特定信息的日志内容，例如查找包含南京的最近的日志，可以这样做：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f daily_mail.log | grep 南京</span><br></pre></td></tr></table></figure>
<p>如果需要查看所有包含南京的日志信息，可以这样做：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat daily_mail.log | grep 南京</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Phalcon</category>
      </categories>
      <tags>
        <tag>Phalcon</tag>
        <tag>PHP</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac docker内请求http(s)失败的问题处理</title>
    <url>/2017/12/23/docker-for-mac-localhost-issue/</url>
    <content><![CDATA[<p>新建了一个docker容器，发现在容器内运行go get命令时会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@27a3532133fa bin]# go get -u -v github.com/nsf/gocode</span><br><span class="line">github.com/nsf/gocode (download)</span><br><span class="line"># cd /home/work/data/www/go/src/github.com/nsf/gocode; git pull --ff-only</span><br><span class="line">error: Failed connect to github.com:8888; Operation now in progress while accessing https://github.com/nsf/gocode/info/refs</span><br><span class="line"></span><br><span class="line">fatal: HTTP request failed</span><br><span class="line">package github.com/nsf/gocode: exit status 1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>访问github.com时莫名其妙的多了一个8888端口，查了相关资料发现是Mac新版的docker加了个http_proxy代理：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@27a3532133fa bin]# echo $http_proxy</span><br><span class="line">docker.for.mac.localhost:8888</span><br></pre></td></tr></table></figure></p>
<p>找了很长时间也没发现怎么去掉这个http_proxy，最后发现可以将http_proxy这个环境变量定义为空，就可以把原来那个值覆盖掉，于是在~/.bash_profile加上<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export http_proxy=&quot;&quot;</span><br></pre></td></tr></table></figure></p>
<p>再source ~/.bash_profile就可以了。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下Python2升级到Python3之后yd包不兼容问题踩坑历程</title>
    <url>/2020/05/03/py2-py3-yd-trouble-for-mac/</url>
    <content><![CDATA[<p>最近用Mac brew安装一些包的时候顺带把Python从2.7升级到了3.7，导致之前在Python2下安装的很多包用不了了，例如yd、ipython、musicbox等：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">╭─zuolicong@zuolicongdeAir ~</span><br><span class="line">╰─$ musicbox</span><br><span class="line">zsh: /usr/local/bin/musicbox: bad interpreter: /usr/local/opt/python/bin/python2.7: no such file or directory</span><br></pre></td></tr></table></figure></p>
<p>平时用yd命令翻译单词还是挺方便的，于是就想着索性用pip3再安装一遍，反正Python2后面也要被淘汰了。然而以为很简单的事，却一顿折腾。运行pip3 install yd先报了这么一个错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named &apos;version&apos;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="踩坑历程"><a href="#踩坑历程" class="headerlink" title="踩坑历程"></a>踩坑历程</h2><p>既然没有version包，那就再安装一个呗，于是pip3 install version，然而又报这个：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">importError: cannot import name &apos;izip_longest&apos;</span><br></pre></td></tr></table></figure></p>
<p>在网上查了下，itertools.izip在pyhton3中已被去掉了，zip成为内置的方法。解决方法是找到version包源文件中使用了”from itertools import izip_longest”的文件， 将izip_longest改为zip_longest，再手动安装，然而/usr/local/lib/python3.7/site-packages目录下也没有pip3下载的version包源文件，我试着用pip3 download version，仍然报上面那个错。看来只能去官网下载了：<a href="https://pypi.org/project/version/" target="_blank" rel="noopener">https://pypi.org/project/version/</a></p>
<p>官网的version包链接到了<a href="https://github.com/keleshev/version" target="_blank" rel="noopener">https://github.com/keleshev/version</a> ，可以直接下载zip文件，然后执行以下命令就可以安装version了：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">╭─zuolicong@zuolicongdeAir ~/python-code</span><br><span class="line">╰─$ pip3 install ./version-master.zip</span><br><span class="line">Processing ./version-master.zip</span><br><span class="line">Building wheels for collected packages: version</span><br><span class="line">  Building wheel for version (setup.py) ... done</span><br><span class="line">  Created wheel for version: filename=version-0.1.2-py3-none-any.whl size=3249 sha256=d7f32866382d5d711c6e72e0a877ac2062fc7f25bed901567cbabd9168b17abc</span><br><span class="line">  Stored in directory: /Users/zuolicong/Library/Caches/pip/wheels/25/58/94/317ecc66e2db4df75bb89ea3bf33401b3de1360fdb984f0428</span><br><span class="line">Successfully built version</span><br><span class="line">Installing collected packages: version</span><br><span class="line">Successfully installed version-0.1.2</span><br></pre></td></tr></table></figure></p>
<p>可以发现官网上的version包其实对Python2和Python3做了兼容：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> sys.version_info &gt;= (<span class="number">3</span>, <span class="number">0</span>):</span><br><span class="line">    <span class="keyword">from</span> itertools <span class="keyword">import</span> zip_longest <span class="keyword">as</span> izip_longest</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">from</span> itertools <span class="keyword">import</span> izip_longest</span><br></pre></td></tr></table></figure></p>
<p>再运行pip3 install yd命令，bingo，安装成功，然而我还是太年轻，使用yd的时候又遇到一系列兼容问题：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/bin/yd", line 5, in &lt;module&gt;</span><br><span class="line">    from yd.yd import main</span><br><span class="line">  File "/usr/local/lib/python3.7/site-packages/yd/yd.py", line 131</span><br><span class="line">    print output</span><br><span class="line">               ^</span><br><span class="line">SyntaxError: Missing parentheses in call to 'print'. Did you mean print(output)?</span><br></pre></td></tr></table></figure></p>
<p>Python2中的”print output”在Python3中需要改成”print(output)”</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/bin/yd", line 5, in &lt;module&gt;</span><br><span class="line">    from yd.yd import main</span><br><span class="line">  File "/usr/local/lib/python3.7/site-packages/yd/yd.py", line 4, in &lt;module&gt;</span><br><span class="line">    import environ</span><br><span class="line">ModuleNotFoundError: No module named 'environ'</span><br></pre></td></tr></table></figure>
<p>继续pip3 install environ</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/bin/yd", line 5, in &lt;module&gt;</span><br><span class="line">    from yd.yd import main</span><br><span class="line">  File "/usr/local/lib/python3.7/site-packages/yd/yd.py", line 4, in &lt;module&gt;</span><br><span class="line">    import environ</span><br><span class="line">  File "/usr/local/lib/python3.7/site-packages/environ.py", line 114</span><br><span class="line">    raise ValueError, "No frame marked with %s." % fname</span><br><span class="line">                    ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>
<p>Python3中raise用法需要改成：raise ValueError(“No frame marked with %s.” % fname)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/bin/yd", line 5, in &lt;module&gt;</span><br><span class="line">    from yd.yd import main</span><br><span class="line">  File "/usr/local/lib/python3.7/site-packages/yd/yd.py", line 4, in &lt;module&gt;</span><br><span class="line">    import environ</span><br><span class="line">  File "/usr/local/lib/python3.7/site-packages/environ.py", line 250, in &lt;module&gt;</span><br><span class="line">    ctx = Environ(None)</span><br><span class="line">  File "/usr/local/lib/python3.7/site-packages/environ.py", line 105, in __init__</span><br><span class="line">    elif isinstance(frame, basestring):</span><br><span class="line">NameError: name 'basestring' is not defined</span><br></pre></td></tr></table></figure>
<p>Python3中”basestring”需要改成”str”</p>
<p>然而无解的来了：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/local/bin/yd", line 5, in &lt;module&gt;</span><br><span class="line">    from yd.yd import main</span><br><span class="line">  File "/usr/local/lib/python3.7/site-packages/yd/yd.py", line 7, in &lt;module&gt;</span><br><span class="line">    import ydsearch</span><br><span class="line">ModuleNotFoundError: No module named 'ydsearch'</span><br></pre></td></tr></table></figure></p>
<p>执行pip3 install ydsearch报：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR: Could not find a version that satisfies the requirement ydsearch (from versions: none)</span><br><span class="line">ERROR: No matching distribution found for ydsearch</span><br></pre></td></tr></table></figure></p>
<p>这么说来Python3压根就不支持yd包，害我还折腾了这么长时间。于是想到go是不是有类似的包可以替代，于是github上搜了下发现了这个：<a href="https://github.com/TimothyYe/ydict" target="_blank" rel="noopener">https://github.com/TimothyYe/ydict</a> ，于是<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get -v github.com/TimothyYe/ydict</span><br></pre></td></tr></table></figure></p>
<p>嗯，真香。</p>
<h2 id="一点想法"><a href="#一点想法" class="headerlink" title="一点想法"></a>一点想法</h2><p>只能说Python 2和3兼容性真的太差，如果项目想从2升级到3成本太高，导致生态有点割裂。感觉设计者初期没太想好。不过我等屁民也不好评判大佬当初的想法，只能尽量避免踩坑，或者寻求可替代的方案，比如go。当然不同的语言使用的场景不同，适合的才是最好的。</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>git打tag的方法和技巧</title>
    <url>/2016/01/23/git-tag/</url>
    <content><![CDATA[<p>使用git作为版本控制工具，在代码上线之前需要打tag，便于团队有条不紊地上线代码。在这里总结一下打tag的方法与可能用到的技巧。</p>
<h2 id="打tag并上线的常规流程"><a href="#打tag并上线的常规流程" class="headerlink" title="打tag并上线的常规流程"></a>打tag并上线的常规流程</h2><p>一般是基于master分支打tag并推送tag到远程仓库，然后上线。要上线的代码合到master分支上之后，切换到master分支，pull最新代码，然后查看远程仓库的最新tag（假设为release_im_v0.0.9.8），在其基础上打tag release_im_v0.0.9.9。然后查看线上tag是哪一个（假设为release_im_v0.0.9.7），将新打的tag与线上tag进行diff，看代码有没有冲突，或者有没有别人合到master上但是暂时还不能上线的代码，如果没有问题，就可以把tag推送到远程仓库，然后请QA君帮忙上线。需要注意的是不能直接在线上tag的基础上加一作为新的tag，因为在你打tag期间团队其他人可能也打了tag，只是还没来得及上线而已，为避免冲突，需要基于远程仓库的最新tag打新tag。打tag并上线的流程如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">$ git pull</span><br><span class="line">$ git tag|grep im|tail                                 #查看远程仓库含有im的最新tag</span><br><span class="line">$ git tag -a release_im_v0.0.9.9 -m &apos;im咨询记录更改&apos;     #一般打含有附注的标签</span><br><span class="line">$ git diff release_im_v0.0.9.7 release_im_v0.0.9.9     #如果改动比较多，也可以在gitlab上进行diff（当然要先push）</span><br><span class="line">#如果diff没有问题，就可以把tag推送到远程仓库，远程仓库如果是origin，则可省略origin</span><br><span class="line">$ git push [origin] release_im_v0.0.9.9                #推送具体的tag到远程仓库</span><br><span class="line">$ git push [origin] --tags                             #一次推送所有的tag到远程仓库</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果diff有冲突，或者master分支上含有不能上线的代码，或者要修改一个线上的bug比较紧急，就需要基于线上tag拉分支，把自己的修改的代码应用到该分支，然后在该分支上打tag上线。需要注意的是，基于自己的分支打tag上完线，还是要把该分支合到master上，不然自己改动的代码会被后面基于master的tag所覆盖。</p>
<h2 id="基于线上tag修改代码并上线"><a href="#基于线上tag修改代码并上线" class="headerlink" title="基于线上tag修改代码并上线"></a>基于线上tag修改代码并上线</h2><p>当需要解决线上bug比较紧急，则需要基于线上tag拉分支，在该分支修改代码并打tag上线。步骤如下（依然假设线上tag为release_im_v0.0.9.7，远程仓库最新tag为release_im_v0.0.9.8）：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git fetch --tags                              #查看远程仓库的tag</span><br><span class="line">$ git branch new_branch release_im_v0.0.9.7     #基于线上tag拉分支new_branch</span><br><span class="line">$ git checkout new_branch                       #切到该分支并修改代码解决bug</span><br><span class="line">$ git commit -am &apos;fix bug&apos;                      #tag默认打在最新提交的commit上</span><br><span class="line">$ git tag -a release_im_v0.0.9.9 -m &apos;fix bug&apos;   </span><br><span class="line">$ git diff release_im_v0.0.9.7 release_im_v0.0.9.9</span><br><span class="line">$ git push --tags</span><br></pre></td></tr></table></figure></p>
<h2 id="git-cherry-pick的用法"><a href="#git-cherry-pick的用法" class="headerlink" title="git cherry-pick的用法"></a>git cherry-pick的用法</h2><p>当需要把某个分支的某次commit应用到另外一个分支，git cherry-pick命令就派上用场了。假设我们现在在a分支上，该分支上有一个commit（假设其哈希码为d986206）需要应用到b分支上，那么可以这么做：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --oneline       #查看a分支commit历史找到需要应用到b分支上的commit的哈希码为d986206</span><br><span class="line">$ git show d986206        #确认commit内容</span><br><span class="line">$ git checkout b</span><br><span class="line">$ git cherry-pick d986206</span><br></pre></td></tr></table></figure></p>
<h2 id="基于线上tag打补丁并上线"><a href="#基于线上tag打补丁并上线" class="headerlink" title="基于线上tag打补丁并上线"></a>基于线上tag打补丁并上线</h2><p>假如我们在自己的test分支修改了很多代码，合到master之后发现master不能上线，而且该分支同时修改了两个相关的线上的tag（例如PC站和手机m站），需要分别把相应的修改应用到相应的tag上，并上线，由于commit的次数比较多，用cherry-pick就比较麻烦，这时我们就需要打补丁了。现在假设PC站线上tag和远程仓库最新tag都是release_www_v3.2.2.6，手机m站线上tag和远程仓库最新tag都是release_m_v3.0.8.3，运用第二部分中的方法基于线上tag分别拉取PC站和m站的分支www-patch和m-patch。<br>首先我们在自己的分支（这里是test分支）运行 git log –oneline 查看commit信息：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog%2Fgit%E6%89%93tag%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E6%8A%80%E5%B7%A7%2Fgit_log.png" alt="git log"><br>发现544cf8c（主站获取id）、86721b7（m站获取id）、3971048（获取主站name）和f788477（获取m站name）这四次commit是需要上线的改动，于是我们将当前test分支与fb20a04（建立m类）这次commit进行diff以查看前四个commit的内容，确认无误后就可以打补丁了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff fb20a04 test &gt; patch</span><br></pre></td></tr></table></figure>
<p>用vim打开patch文件截取部分如下：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog%2Fgit%E6%89%93tag%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E6%8A%80%E5%B7%A7%2Fpatch.png" alt="patch"><br>接下来切换到需要应用补丁的分支并应用该补丁：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout www-patch</span><br><span class="line">$ git apply patch           #在www-patch分支应用补丁</span><br><span class="line">$ git diff                  #查看应用补丁之后的diff以确认无误</span><br><span class="line">$ rm patch                  #删除patch文件，git不需要追踪该文件，便于commit</span><br><span class="line">$ git commit -am &apos;apply patch&apos;</span><br><span class="line">$ git tag -a release_www_v3.2.2.7 -m &apos;打补丁上线&apos;</span><br></pre></td></tr></table></figure></p>
<p>当然也可以把patch文件放在~/目录下，假设代码文件夹也在~/目录下，然后这样打补丁：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff fb20a04 test &gt; ~/patch</span><br><span class="line">$ git checkout www-patch</span><br><span class="line">$ patch -p1&lt;~/patch</span><br><span class="line">$ git commit -am &apos;apply patch&apos;</span><br><span class="line">$ git tag -a release_www_v3.2.2.7</span><br></pre></td></tr></table></figure>
<p>接下来就是打手机m站的tag，这时我们就可以用git cherry-pick方法了，先在www-patch分支查看应用补丁的commit：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog%2Fgit%E6%89%93tag%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E6%8A%80%E5%B7%A7%2Fapply_patch.png" alt="apply patch"><br>然后应用到m-patch分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout m-patch</span><br><span class="line">$ git cherry-pick 584f3ef</span><br><span class="line">$ git commit -am &apos;apply patch&apos;</span><br><span class="line">$ git tag -a release_m_v3.0.8.4 -m &apos;打补丁上线&apos;</span><br><span class="line">$ git push --tags           #最后把新打的tag都推送到远程仓库以上线</span><br></pre></td></tr></table></figure>
<h2 id="基于特定的commit打tag"><a href="#基于特定的commit打tag" class="headerlink" title="基于特定的commit打tag"></a>基于特定的commit打tag</h2><p>假如我们想基于cf57ec4（建立www类）这次commit打tag，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git tag -a www0.9.9 cf57ec4 -m &apos;建立www类&apos;</span><br></pre></td></tr></table></figure>
<p>运行git show www0.9.9命令查看该tag信息，可以看到是基于cf57ec4（建立www类）这次commit打的：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog%2Fgit%E6%89%93tag%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E6%8A%80%E5%B7%A7%2Fshow_tag.png" alt="show tag"><br>打tag时如果不指定commit，则默认基于当前分支的最新一次commit打。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>IM系统redis迁移到codis实践</title>
    <url>/2017/04/26/im-redis-to-codis/</url>
    <content><![CDATA[<p>公司决定使用自己搭建的codis集群代替阿里云的redis，二者性能差别不大，但是自运维的codis成本更低，同时也借这次迁移来规范key的命名，统一命名成”系统(必须):子系统(必须):存储类型(可选，cache|storage):数据(必须):版本(可选):其它(可选)”的形式，方便维护。我负责IM即时通信系统的redis迁移。IM使用redis的地方很多，并且数据量很大，例如消息拉链、联系人、最近一条消息、未读消息数、黑名单、频率及敏感词限制、Token等，而消息拉链、最近一条消息和未读消息数是进行持久存储的，因此这些数据需要进行迁移。</p>
<a id="more"></a>
<h2 id="一、方案"><a href="#一、方案" class="headerlink" title="一、方案"></a>一、方案</h2><p>为了不影响用户的使用，代码上线定在凌晨一点。数据迁移到codis的同时还要修改key，因此不能直接使用redis-port等工具将旧的redis里面的数据同步到新的codis集群，最终决定写脚本进行数据迁移。先使用keys命令模糊匹配出旧redis里的所有key，取出数据然后设置新的key批量保存到codis集群中。消息拉链的数据量很大，可以先进行一次全量的数据迁移，代码上线之前再进行一次增量数据迁移。最近一条消息和未读消息数数据时效性比较大，也在代码上线前进行同步。具体步骤如下：</p>
<ul>
<li>将代码中记录redis key的常量文件备份一份，将原来的key修改成规范形式，并添加codis的配置文件及连接方法，写脚本通过备份的redis key文件从旧数据库读数据，然后批量写入codis集群；</li>
<li>在beta机器上跑脚本全量迁移消息拉链数据；</li>
<li>上线前IM系统停止服务，避免在上线过程中有数据写入；</li>
<li>从MySQL数据库取出全量迁移消息拉链之后新增的数据，添加到codis，并迁移最近一条消息和未读消息数的数据；</li>
<li>通过查看日志、自测等方法验证数据迁移是否成功；</li>
<li>代码上线；</li>
<li>QA进行回归测试</li>
</ul>
<h2 id="二、遇到的问题及解决方法"><a href="#二、遇到的问题及解决方法" class="headerlink" title="二、遇到的问题及解决方法"></a>二、遇到的问题及解决方法</h2><ol>
<li><p>数据迁移脚本运行时间很长(全量迁移消息拉链的脚本运行了5个小时左右)，如果直接运行脚本，断网或者终端与服务器连接断开会导致脚本停止运行<br>解决方法：使用nohup在后台运行脚本，如下所示，并且在退出服务器时要通过exit命令退出，不能直接关掉，否则进程也会中止。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup php cli.php redis_migrate migrateTotal &amp;&gt;&gt; /apps2/tmp/im/redis_migrate_migrateTotal.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>日志文件太大（最大的一个有1.8G），beta机器的一个磁盘打满了，导致进程结束<br>解决方法：通过df命令查看磁盘空间使用情况，选择剩余空间比较大的磁盘打日志，这里选择/dev/xvdc1，即/apps2文件夹下面。<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog/im-redis-to-codis/df%E7%BB%93%E6%9E%9C.png" alt="df结果"></p>
</li>
<li><p>一次mset太多键值对数据，报Segmentation fault，如图：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog/im-redis-to-codis/segmentation_fault.png" alt="Segmentation fault"><br>解决方法：先对数据进行分组，如5000个键值对为一组，然后循环进行mset，代码见第三部分。</p>
</li>
<li><p>从MySQL数据库查消息拉链的增量数据，报timeout exception，如图：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog/im-redis-to-codis/slow_query.png" alt="slow query"><br>根据日志可以看出这是一个慢查询，sql语句如下，查看表结构发现update_time字段没有建索引，而且数据量很大（查了下一对一聊天记录表有36133336条数据），所以查询慢，而另外一个字段create_time建了联合索引，根据最左前缀法则，使用create_time代替update_time将用到索引，问题得到解决。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 慢查询sql</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> im_message_info_single <span class="keyword">WHERE</span> update_time &gt; <span class="string">"2017-04-25 23:07:51"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- create_time和sender_r字段建立的联合索引</span></span><br><span class="line">KEY `idx_createtime_send_r` (`create_time`,`sender_r`)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 优化之后的sql</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> im_message_info_single <span class="keyword">WHERE</span> create_time &gt; <span class="string">"2017-04-25 23:07:51"</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用keys命令获取所有用户一对一聊天未读消息数的key时，redis报”read error on connection”错误，如图：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog/im-redis-to-codis/read_error_on_connection.png" alt="read error on connection"><br>google了一下发现是数据量太大，读取超时的原因，通过setOption命令设置不超时解决，参见：<a href="https://nil.sh/RedisException-with-message-read-error-on-connection.html" target="_blank" rel="noopener">https://nil.sh/RedisException-with-message-read-error-on-connection.html</a></p>
</li>
<li><p>迁完之后发现codis里找不到数据，可能是db不对，默认是db 0，通过select命令选择数据所在db之后再查看。</p>
</li>
</ol>
<h2 id="三、相关代码"><a href="#三、相关代码" class="headerlink" title="三、相关代码"></a>三、相关代码</h2><p>所有业务的消息拉链都是采用sorted set结构，所有业务的最后一条消息都是采用string结构，社区、考研、金囿、群组这几个业务的未读消息数采用hash结构，系统未读消息采用sorted set结构，一对一聊天的未读消息数采用string结构，sorted set、string和hash这三种结构的数据分别先通过keys命令获取保存所有key的数组，然后调用以下函数（略去Action函数）将数据迁移到codis。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisMigrateTask</span> <span class="keyword">extends</span> \<span class="title">Phalcon</span>\<span class="title">Cli</span>\<span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> CHUNK_SIZE = <span class="number">5000</span>;    <span class="comment">// 数据分组大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $redisInstance = <span class="keyword">null</span>;    <span class="comment">// redis实例</span></span><br><span class="line">    <span class="keyword">public</span> $codisInstance = <span class="keyword">null</span>;    <span class="comment">// codis实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量迁移sorted set数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $oldKeys array 存储旧key的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $oldPrefix string 旧key前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $newPrefix string 新key前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">migrateSortedSetData</span><span class="params">($oldKeys, $oldPrefix, $newPrefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($oldKeys === <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] get keys [&#123;$oldPrefix&#125;*] failed!"</span> . PHP_EOL;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">empty</span>($oldKeys)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] keys [&#123;$oldPrefix&#125;*] are empty!"</span> . PHP_EOL;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] get keys [&#123;$oldPrefix&#125;*] successfully!"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">foreach</span> ($oldKeys <span class="keyword">as</span> $oldKey) &#123;</span><br><span class="line">                $newKey = <span class="keyword">$this</span>-&gt;getNewKey($oldKey, $oldPrefix, $newPrefix);</span><br><span class="line">                $sortedSetData = <span class="keyword">$this</span>-&gt;redisInstance-&gt;zRange($oldKey, <span class="number">0</span>, <span class="number">-1</span>, <span class="keyword">true</span>);</span><br><span class="line">                $items = [];</span><br><span class="line">                $logArr = [];</span><br><span class="line">                <span class="keyword">foreach</span> ($sortedSetData <span class="keyword">as</span> $val =&gt; $score) &#123;</span><br><span class="line">                    $items[] = $score;</span><br><span class="line">                    $items[] = $val;</span><br><span class="line">                    $logArr[] = $score . <span class="string">':'</span> . $val;</span><br><span class="line">                &#125;</span><br><span class="line">                array_unshift($items, $newKey);</span><br><span class="line">                $num = call_user_func_array([<span class="keyword">$this</span>-&gt;codisInstance, <span class="string">'zAdd'</span>], $items);    <span class="comment">// 添加成功个数</span></span><br><span class="line">                <span class="keyword">if</span> ($num === <span class="keyword">false</span>) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] old key [&#123;$oldKey&#125;] failed to migrate to codis! old score=&gt;value: "</span> . join(<span class="string">','</span>, $logArr) . PHP_EOL;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> ($num == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] old key [&#123;$oldKey&#125;] has existed and is the same! old score=&gt;value: "</span> . join(<span class="string">','</span>, $logArr) . PHP_EOL;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] old key [&#123;$oldKey&#125;] with &#123;$num&#125; values was migrated to codis successfully! old score=&gt;value: "</span> . join(<span class="string">','</span>, $logArr) . PHP_EOL;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分组批量迁移string数据。数据太多全量用mset会报Segmentation fault, 分组mget, mset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $oldKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $oldPrefix</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $newPrefix</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">migrateKvDataChunk</span><span class="params">($oldKeys, $oldPrefix, $newPrefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($oldKeys === <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] get keys [&#123;$oldPrefix&#125;*] failed!"</span> . PHP_EOL;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">empty</span>($oldKeys)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] keys [&#123;$oldPrefix&#125;*] are empty!"</span> . PHP_EOL;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] get keys [&#123;$oldPrefix&#125;*] successfully!"</span> . PHP_EOL;</span><br><span class="line">            $oldKeysChunk = array_chunk($oldKeys, <span class="keyword">self</span>::CHUNK_SIZE);</span><br><span class="line">            <span class="keyword">foreach</span> ($oldKeysChunk <span class="keyword">as</span> $oldkeysGroup) &#123;</span><br><span class="line">                $valuesGroup = <span class="keyword">$this</span>-&gt;redisInstance-&gt;mget($oldkeysGroup);</span><br><span class="line">                $valuesGroupAssoc = [];</span><br><span class="line">                <span class="keyword">foreach</span> ($oldkeysGroup <span class="keyword">as</span> $idx =&gt; $oldKey) &#123;</span><br><span class="line">                    $newKey = <span class="keyword">$this</span>-&gt;getNewKey($oldKey, $oldPrefix, $newPrefix);</span><br><span class="line">                    $valuesGroupAssoc[$newKey] = $valuesGroup[$idx];</span><br><span class="line">                &#125;</span><br><span class="line">                $ret = <span class="keyword">$this</span>-&gt;codisInstance-&gt;mset($valuesGroupAssoc);    <span class="comment">// bool值</span></span><br><span class="line">                <span class="keyword">if</span> ($ret) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] old kvs was migrated to codis successfully! old keys: "</span> . join(<span class="string">','</span>, $oldkeysGroup) . PHP_EOL;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] old kvs failed to migrate to codis! old keys: "</span> . join(<span class="string">','</span>, $oldkeysGroup) . PHP_EOL;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量迁移hash数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $oldKeys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $oldPrefix</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $newPrefix</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">migrateHashData</span><span class="params">($oldKeys, $oldPrefix, $newPrefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($oldKeys === <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] get keys [&#123;$oldPrefix&#125;*] failed!"</span> . PHP_EOL;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="keyword">empty</span>($oldKeys)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] keys [&#123;$oldPrefix&#125;*] are empty!"</span> . PHP_EOL;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] get keys [&#123;$oldPrefix&#125;*] successfully!"</span> . PHP_EOL;</span><br><span class="line">            <span class="keyword">foreach</span> ($oldKeys <span class="keyword">as</span> $oldKey) &#123;</span><br><span class="line">                $hashData = <span class="keyword">$this</span>-&gt;redisInstance-&gt;hGetAll($oldKey);</span><br><span class="line">                $newKey = <span class="keyword">$this</span>-&gt;getNewKey($oldKey, $oldPrefix, $newPrefix);</span><br><span class="line">                $ret = <span class="keyword">$this</span>-&gt;codisInstance-&gt;hMset($newKey, $hashData);    <span class="comment">// bool值</span></span><br><span class="line">                $logArr = [];</span><br><span class="line">                <span class="keyword">foreach</span> ($hashData <span class="keyword">as</span> $hashKey =&gt; $hashVal) &#123;</span><br><span class="line">                    $logArr[] = $hashKey . <span class="string">':'</span> . $hashVal;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ($ret) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] old hash key [&#123;$oldKey&#125;] was migrated to codis successfully! old hash data: "</span> . join(<span class="string">','</span>, $logArr) . PHP_EOL;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="keyword">__METHOD__</span> . <span class="string">' ['</span> . date(<span class="string">'Y-m-d H:i:s'</span>) . <span class="string">"] old hash key [&#123;$oldKey&#125;] failed to migrate to codis! old hash data: "</span> . join(<span class="string">','</span>, $logArr) . PHP_EOL;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成新的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $oldKey string 旧redis的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $oldPrefix string 旧key前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $newPrefix string 新key前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewKey</span><span class="params">($oldKey, $oldPrefix, $newPrefix)</span> </span>&#123;</span><br><span class="line">        $offset = strlen($oldPrefix);</span><br><span class="line">        $suffix = substr($oldKey, $offset);</span><br><span class="line">        $newKey = $newPrefix . $suffix;</span><br><span class="line">        <span class="keyword">return</span> $newKey;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Linux</tag>
        <tag>Redis</tag>
        <tag>Codis</tag>
      </tags>
  </entry>
  <entry>
    <title>利用堆排序合并k个有序数组的PHP实现</title>
    <url>/2017/04/10/php-merge-k-sorted-array/</url>
    <content><![CDATA[<p>网上有很多关于这个问题的讨论，最优的解法是利用堆排序进行合并，不过大多数是用C、Python等实现的，这里用PHP来实现。</p>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>假设是从小到大排序，整体思路是构建一个大小为k(k为有序数组个数)的小根堆，堆里面存储的是每个数组当前的最小值，依次取出堆顶的元素存入结果集中，然后将该元素的下一个元素放到堆顶，重新进行堆排序，再取堆顶元素，不断循环，直到所有数组中的元素都存入结果集中。代码如下：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $arr 要合并的有序数组组成的二维数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeKSortedArray</span><span class="params">($arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 过滤掉空数组</span></span><br><span class="line">    $arr = array_filter($arr, <span class="function"><span class="keyword">function</span> <span class="params">($v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">empty</span>($v) !== <span class="keyword">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($arr)) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有数组被过滤，原索引将不连续，所以要重建索引</span></span><br><span class="line">    $arr = array_values($arr);</span><br><span class="line">    <span class="comment">// 让堆元素从下标1开始</span></span><br><span class="line">    array_unshift($arr, []);</span><br><span class="line">    <span class="comment">// 构建初始堆</span></span><br><span class="line">    $lastParentNode = floor((count($arr) - <span class="number">1</span>) / <span class="number">2</span>);   <span class="comment">// 最后一个非叶子节点位置</span></span><br><span class="line">    <span class="keyword">for</span> ($i = $lastParentNode; $i &gt; <span class="number">0</span>; $i--) &#123;</span><br><span class="line">        adjustHeap($arr, $i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并数组</span></span><br><span class="line">    $mergedArr = [];</span><br><span class="line">    <span class="keyword">while</span> (!<span class="keyword">empty</span>($arr[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="comment">// 将第一个数组的当前元素(即堆顶)存入结果集中，</span></span><br><span class="line">        $mergedArr[] = current($arr[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 将第一个数组的内部指针移动到下一位，如果下一位没有元素，则删除该数组，后面的数组自动依次向前移动</span></span><br><span class="line">        <span class="keyword">if</span> (next($arr[<span class="number">1</span>]) === <span class="keyword">false</span>) &#123;</span><br><span class="line">            array_splice($arr, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($arr[<span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        adjustHeap($arr, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $mergedArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建小根堆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adjustHeap</span><span class="params">(&amp;$arr, $i)</span> </span>&#123;</span><br><span class="line">    $len = count($arr);</span><br><span class="line">    $arr[<span class="number">0</span>] = $arr[$i];</span><br><span class="line">    <span class="keyword">for</span> ($k = $i * <span class="number">2</span>; $k &lt;= $len - <span class="number">1</span>; $k *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($k + <span class="number">1</span> &lt;= $len - <span class="number">1</span>) &amp;&amp; (current($arr[$k]) &gt; current($arr[$k+<span class="number">1</span>]))) &#123;</span><br><span class="line">            $k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (current($arr[<span class="number">0</span>]) &lt; current($arr[$k])) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $arr[$i] = $arr[$k];</span><br><span class="line">        $i = $k;</span><br><span class="line">    &#125;</span><br><span class="line">    $arr[$i] = $arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>用psysh引入上面的代码，测试如下：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog/php-merge-k-sorted-array/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="测试结果"></p>
]]></content>
      <categories>
        <category>DataStructure</category>
      </categories>
      <tags>
        <tag>DataStructure</tag>
        <tag>HeapSort</tag>
      </tags>
  </entry>
  <entry>
    <title>以旧换新项目中的微服务实践</title>
    <url>/2018/05/01/microservice-in-old-for-new/</url>
    <content><![CDATA[<p>微服务在近几年比较火，公司也在使用微服务架构。我在最近参与开发的以旧换新项目中也进行了一些微服务相关的实践，在这里总结一下遇到的问题和收获。</p>
<a id="more"></a>
<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>该项目主要是针对印度商城，用户用旧手机换取优惠券，抵扣购买新手机的部分费用。流程如下图所示，用户在web端输入手机IMEI信息，后端调用cashify的接口获取报价及报价id，或者用app进行检测（使用cashify提供的SDK）获取报价和报价id，再调用以旧换新服务生成以旧换新券。用户下单的时候可以使用券，调用支付组成服务以及订单组的接口完成交易，物流组负责发货相关功能，实际配送由第三方物流公司Ekart完成。Ekart将新手机派送给用户，并回收用户的旧手机，回收时会进行质检，没问题了会把旧手机派送给cashify，cashify把旧手机的钱打给我们。<br><img src="/images/old-for-new.png" alt="以旧换新流程图"></p>
<p>我主要负责和cashify对接接口、商城后端生成以旧换新券流程中的相关接口以及以旧换新券服务。以旧换新券服务使用公司的SOA框架，其它项目通过thrift调用以旧换新券服务。</p>
<h2 id="使用微服务的原因"><a href="#使用微服务的原因" class="headerlink" title="使用微服务的原因"></a>使用微服务的原因</h2><p>以旧换新券被做成了一个单独的服务，主要有一下几点好处：</p>
<ul>
<li><p>首先，比较安全。作为独立的服务，可以限制只有内网的ip才能访问，不对外暴露；此外，由于使用thrift协议，需要使用SDK才能请求相应的接口，很大程度上避免了恶意攻击；</p>
</li>
<li><p>其次，以旧换新券服务的代码和数据库都部署在独立的机器上，即使该服务挂了，也不会影响商城其它的功能。当遇到流量比较大的情况时，可以单独给服务加机器，提高机器的使用率；</p>
</li>
<li><p>再者，可以降低业务的耦合度，避免单体应用代码过于庞大臃肿的情况。</p>
</li>
</ul>
<h2 id="遇到的问题和解决方法"><a href="#遇到的问题和解决方法" class="headerlink" title="遇到的问题和解决方法"></a>遇到的问题和解决方法</h2><h3 id="服务与商城后端解耦不够充分"><a href="#服务与商城后端解耦不够充分" class="headerlink" title="服务与商城后端解耦不够充分"></a>服务与商城后端解耦不够充分</h3><p>最开始我考虑的是，以旧换新券后续可能还有别的生成途径，不一定要通过请求cashify的接口获取报价来生成，于是我就把请求cashify的逻辑都放到商城后端来做，请求完之后再调以旧换新券服务生成券，后来发现这样做存在很大的问题：在PC或m站，用户输入手机的IMEI号来生成以旧换新券，商城后端得先调用服务判断该IMEI号是否已经生成了券，生成的券是否已经过期，如果没有生成过券或者生成的券已经过期了就会调用cashify的接口获取报价和报价ID等信息，并根据这些信息再次调用服务生成券，而服务中生成券逻辑需要再次查询数据库判断是否满足生成券的条件，相当于商城和服务中有重复的代码。于是将调用cashify接口的逻辑迁移到服务中进行，使服务和商城后端不再耦合。</p>
<p>其实最开始的思路是有问题的，即使以旧换新券还有别的生成途径，这些和生成券相关的逻辑都应该放到一起，充分和商城代码解耦。</p>
<h3 id="并发情况下数据不一致的问题"><a href="#并发情况下数据不一致的问题" class="headerlink" title="并发情况下数据不一致的问题"></a>并发情况下数据不一致的问题</h3><p>上面提到过，在PC或m站生成券的时候会先根据IMEI号判读是否满足生成券的条件，如果满足就会调用cashify的接口获取报价和报价ID并生成券，记录在数据库中。但是当两个相同的IMEI号同时请求时就会有问题，这两个请求同时去查数据库发现该IMEI号满足生成券的条件，就都去请求cashify的接口，这时cashify会生成两个报价ID，最终数据库保存的是先生成的那个报价ID，而最新生成的报价ID才是有效的，这就导致在优惠券使用之后订单组根据报价ID回调cashify的时候不成功。</p>
<p>最终解决方法是在redis里设置一个过期时间为30秒的key，标记某个IMEI在30秒之内是否已经请求过这个接口，如果请求过，直接返回请求过于频繁的信息，保证同一个IMEI不会同时请求cashify的接口生成两个报价ID；再就是根据日志修复之前有问题的数据；另外，之所以正常情况下（不是刷接口）也会出现两个相同的IMEI号同时请求，是因为用户在点击生成按钮之后发现没有反应，或者是手抖，连续点了两下，所以前端也需要进行相应的优化，在用户点击一次之后，显示一个类似loading的效果，不让用户继续点。</p>
<h3 id="抢购流量大对以旧换新券服务造成压力"><a href="#抢购流量大对以旧换新券服务造成压力" class="headerlink" title="抢购流量大对以旧换新券服务造成压力"></a>抢购流量大对以旧换新券服务造成压力</h3><p>付款页面会调以旧换新券服务获取当前用户可用的券，抢购的时候流量比较大，服务接口的错误率比较高，直接导致有些用户付不了款。解决的方法如下：</p>
<ul>
<li>每次用户生成以旧换新券的时候都在redis里加个key标记该用户有以旧换新券，该key的过期时间和券的过期时间一致。在付款页面先通过redis里的标记判断该用户是否有以旧换新券，有才会去请求服务，没有直接不请求，这样就将没有以旧换新券的流量都挡在了外面，极大的减轻了服务的压力。需要说明的一点是，用户使用券的时候也不去改这个标记，因为用户可能有多张券，维护这个标记的成本很高，就算用户只有不可用的券，大不了这部分用户的流量都打到服务上，压力也不会很大。</li>
<li>在付款页面将调用以旧换新券列表的接口降级，即使接口有问题也不报错，不影响付款流程的进行。</li>
</ul>
<h3 id="接口幂等"><a href="#接口幂等" class="headerlink" title="接口幂等"></a>接口幂等</h3><p>退款的时候为了保证整个退款流程走通，券的退回接口可能会被调用多次，因此退回接口设置了幂等，即使某张券已经退回成功，如果再次请求退回该张券，还是返回成功（不需要修改数据库）。支付组成服务在调以旧换新券服务的退回接口时，可能由于网络原因没有接收到正确的返回结果（实际上已经退回成功），这时会重试三次，如果还是失败，就交给消息队列处理，由于接口设置了幂等，最终调用方会收到退回成功的返回结果。</p>
<h3 id="错误号和Log-ID"><a href="#错误号和Log-ID" class="headerlink" title="错误号和Log ID"></a>错误号和Log ID</h3><p>商城和服务中的错误号最好是统一的，二者之间不要有冲突，这样排查问题的时候更方便。对于同一个请求，商城和服务中用同一个Log ID来记录日志，便于追踪问题（这点项目之前的逻辑已经是这样做的）。</p>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>微服务</tag>
        <tag>RPC</tag>
        <tag>Thrift</tag>
      </tags>
  </entry>
  <entry>
    <title>灵活使用PHP和MySQL处理时间</title>
    <url>/2015/12/16/php-mysql-time/</url>
    <content><![CDATA[<p>PHP的时间函数很多，用法也多样，而MySQL也有丰富的日期和时间类型进行相应的支持，因此在用PHP和MySQL处理时间时可以灵活一点，尽可能提高代码的可重用性和降低耦合度。</p>
<a id="more"></a>
<h2 id="MySQL常用的时间数据类型"><a href="#MySQL常用的时间数据类型" class="headerlink" title="MySQL常用的时间数据类型"></a>MySQL常用的时间数据类型</h2><p>在使用MySQL数据库存储时间变量时字段类型尽量使用MySQL已有的时间数据类型，更方便而且效率更高。MySQL常用的时间数据类型如下：</p>
<table>
<thead>
<tr>
<th>时间类型</th>
<th>存储空间</th>
<th>时间格式</th>
</tr>
</thead>
<tbody>
<tr>
<td>datetime</td>
<td>8 bytes</td>
<td>YYYY-MM-DD HH:MM:SS</td>
</tr>
<tr>
<td>timestamp</td>
<td>4 bytes</td>
<td>YYYY-MM-DD HH:MM:SS</td>
</tr>
<tr>
<td>date</td>
<td>3 bytes</td>
<td>YYYY-MM-DD</td>
</tr>
<tr>
<td>time</td>
<td>3 bytes</td>
<td>HH:MM:SS</td>
</tr>
</tbody>
</table>
<p>一般来说，如果需要在数据库存储时间信息，最好把日期和具体时间都纪录下来，即使产品经理提的需求只是日期或者具体时间，以防后面会用到，比如说按时间排序，或者需要以时间为条件查找某些数据，因此最好使用datetime数据类型或者timestamp。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;</span><br></pre></td></tr></table></figure>
<h2 id="灵活使用PHP时间函数"><a href="#灵活使用PHP时间函数" class="headerlink" title="灵活使用PHP时间函数"></a>灵活使用PHP时间函数</h2><p>有时候产品经理提的需求可能不需要显示完整的日期或者时间信息，比如”11-26 10:00:01”的时间格式，我们在MySQL数据库中存储时间数据时是不是就不能用时间数据类型了呢，而是改用字符串类型等等？大可不必，还是可以用，后面需要显示什么样的时间格式可以由PHP时间函数来完成，譬如显示”11-26 10:00:01”的时间格式可以这样做：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$time = date(<span class="string">'m-d H:i:s'</span>,strtotime($datetime));</span><br></pre></td></tr></table></figure>
<h2 id="将时间变量设为常量以提高代码的可重用性"><a href="#将时间变量设为常量以提高代码的可重用性" class="headerlink" title="将时间变量设为常量以提高代码的可重用性"></a>将时间变量设为常量以提高代码的可重用性</h2><p>当然不只是时间变量，只要是用的多的变量都应该设置成常量，要修改只需要修改常量的值即可，而不需要修改所有用到这些变量的代码。我最近写了一个<a href="http://www.genshuixue.com/activity/aishihengen" target="_blank" rel="noopener">爱视恒恩免费录课活动</a>的后台，因为该活动分为几期进行，我写的第一期，为了提高代码可重用性，将活动开始时间和结束时间等时间变量都设为常量，后面几期活动只需要修改活动开始时间和结束时间即可，其它代码都可以直接搬过来用了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> START_TIME = <span class="string">'2015-11-28 10:00:00'</span>;          <span class="comment">//活动开始时间</span></span><br><span class="line"><span class="keyword">const</span> END_TIME = <span class="string">'2015-12-06 23:59:59'</span>;            <span class="comment">//活动结束时间</span></span><br><span class="line"><span class="keyword">const</span> EVERYDAY_TIME = <span class="string">'10:00:00'</span>;                  <span class="comment">//活动期间每天的开始时间</span></span><br><span class="line"></span><br><span class="line">$start_time = date(<span class="string">'Y-m-d'</span>).<span class="string">" "</span>.(<span class="keyword">self</span>::EVERYDAY_TIME);  <span class="comment">//活动期间每天完整的开始时间</span></span><br><span class="line">$time = time();</span><br><span class="line"><span class="keyword">if</span>($time&lt;strtotime(<span class="keyword">self</span>::START_TIME))&#123;</span><br><span class="line">    $join_status = <span class="number">1</span>;                          <span class="comment">//未到活动开始日期</span></span><br><span class="line">&#125; <span class="keyword">elseif</span>($time&gt;strtotime(<span class="keyword">self</span>::END_TIME))&#123;</span><br><span class="line">    $join_status = <span class="number">2</span>;                          <span class="comment">//活动已经结束</span></span><br><span class="line">&#125; <span class="keyword">elseif</span>($time&lt;strtotime($start_time))&#123;</span><br><span class="line">    $join_status = <span class="number">7</span>;                          <span class="comment">//在活动期间，但是没到当天的开始时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取起始日期和结束日期的日期序列"><a href="#获取起始日期和结束日期的日期序列" class="headerlink" title="获取起始日期和结束日期的日期序列"></a>获取起始日期和结束日期的日期序列</h2><p>因为在开发过程中需要按天来取数据库中的数据，因此需要获取从起始日期到结束日期的日期序列，我最开始的做法是直接计算总天数，然后将intval(date(‘d’))加一，这样在下个月的时候intval(date(‘d’))与这个月的intval(date(‘d’))不连续，还要进行判断，代码的耦合度很高，不利于重复利用，正确的姿势应该是这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getDateSeq</span><span class="params">($start_date, $end_date)</span> </span>&#123;</span><br><span class="line">    $te = strtotime($end_date);</span><br><span class="line">    $ts = strtotime($start_date);</span><br><span class="line">    <span class="keyword">if</span> ($te &lt; $ts) &#123; <span class="comment">//如果结束日期小于起始日期，则交换</span></span><br><span class="line">        $tmp = $ts;</span><br><span class="line">        $ts = $te;</span><br><span class="line">        $te = $tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    $seq = [];</span><br><span class="line">    <span class="keyword">for</span> ($i = $ts; $i &lt;= $te;) &#123;</span><br><span class="line">        $currDate = date(<span class="string">'Y-m-d'</span>, $i);</span><br><span class="line">        $i = strtotime(<span class="string">"+1 day &#123;$currDate&#125;"</span>); <span class="comment">//i自增一天</span></span><br><span class="line">        $seq[] = $currDate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $seq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者使用PHP自带的时间类：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getDateRange</span><span class="params">($start_date, $end_date, $format = <span class="string">'Y-m-d'</span>)</span> </span>&#123;</span><br><span class="line">    $begin = <span class="keyword">new</span> \DateTime($start_date);</span><br><span class="line">    $end = <span class="keyword">new</span> \DateTime($end_date);</span><br><span class="line">    $end-&gt;modify(<span class="string">'+1 day'</span>);  <span class="comment">// 这个period不包含结束时间</span></span><br><span class="line">    $interval = <span class="keyword">new</span> \DateInterval(<span class="string">'P1D'</span>);</span><br><span class="line">    $date_range = <span class="keyword">new</span> \DatePeriod($begin, $interval, $end);</span><br><span class="line">    $range = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($date_range <span class="keyword">as</span> $date) &#123;</span><br><span class="line">        $range[] = $date-&gt;format($format);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $range;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>非典型程序猿的程序员之路</title>
    <url>/2016/03/01/undefined/</url>
    <content><![CDATA[<p>实习完已经有一个月了，过年在家的主旋律是吃饭睡觉，来学校几天了心也还没收回来，昨天给电脑重新装了ubuntu系统，然后把hexo安装好了，心血来潮写一篇博客对找工作实习以来的事作一个总结吧。想了想最好的标题应该是非典型程序猿的程序员之路。</p>
<p>不知不觉已经作为一个工（cheng）程（xu）师（yuan）实习了三个月了，从大一到大三上学期从来没想过自己以后的职业会是码代码，因为本来专业（信息管理与信息系统）属于管理学院，有点偏管理，只是和计算机有着些许的联系，自己平时也不是一个典型的程序猿，并没有花很多的时间在码代码上，然而就是这样的一个我，最后却走上了程序员的道路，现在想想，是偶然，也是必然吧（后来发现程序猿这个工作确实很适合闷骚的我，还有一点比较合我心意的是程序猿面试都是单面，没有群面，不需要和一群人撕逼，那画面太美）！</p>
<a id="more"></a>
<p>转折点应该是大三暑假我决定不考研而是找工作，具体原因不再赘述。当时正在跟着班主任做一个大数据的项目，打算作为学校要求的暑期实习，然而在决定找工作之后就后悔之前没有找一个公司的实习了，毕竟有实习经历对找工作是很有帮助的。不过这个项目对后面找工作的帮助也很大，在我的简历中划上了浓墨重彩的一笔。项目做了一个月左右差不多就告一段落了，然后就开始找实习。七月底基本已经没有来学校招实习生的企业了，于是就在智联招聘和51job上投了简历给武汉地区的一些公司。考虑到之前做过和PHP相关的项目，就都投的PHP研发工程师的岗位，但是因为很久没有接触PHP了，有好几家公司的笔试或面试没有通过。看来还是不是搞编程的料，心里这样想着。正当非常失望的时候，杭州阿拉丁信息科技股份有限公司武汉分公司主动联系了我，让我过去面试，这让我喜出望外，于是就约了一个时间过去面试。有了前面的面试经历，我发现自己对PHP不怎么熟，于是这家就报了C++的岗位，毕竟我也是过了二级C++的人（认真脸）。笔试结果那边的主管很满意，聊了聊就决定录用了，考虑到我之前做过PHP相关的项目，而且公司正好比较缺PHP研发人员，就让我做PHP相关的开发工作，这真是有心栽花花不开，无心插柳柳成荫！于是我就这样开始了从事世界上最美的语言–PHP（这个梗估计要说一辈子hhh!）的编程工作。</p>
<p>在实习的过程中对PHP进行了进一步的巩固，同时也通过一个学姐（在腾讯）和一个学长（在百度）、微信公众号、qq群、论坛等各种途径进行内推，但是很悲催的几乎都石沉大海，只有蘑菇街给了一次电话面试的机会，后面也没有音讯了。后来想想应该是简历的问题，字体太小，而且写了太多与岗位无关的内容，显得很不专业（虽然本来就不是很专业==）。于是我大刀阔斧地对简历进行了删改，决定在秋招中好好的大展拳脚。</p>
<p>九月开学秋招就轰轰烈烈的展开了，我的宣讲会列表也越排越长，每天都在网申、笔试和面试，简直忙成狗。然而最初情况也并不理想，很多简历杳无音讯，一些公司都止于一面，渐渐的也有些灰心。后面又上演了有心栽花花不开，无心插柳柳成荫的戏码，那天被通知去武大面苏宁的研发岗位，面试完了之后下楼看见formax金融圈在一楼面试，正好是中午，没什么人，于是就决定进去霸面，积累面经也是好的，没想到后面又电话进行了二面。几天之后，当我从武大信息学部美团的面试教室无精打采地走出来之后，意外收到了formax的offer，这让我精神为之一振，顿时长叹了一口气，有一个保底的offer，心里踏实多了，接下来就可以放开手脚接着去各种笔试面试了。看来万事真的要敢于去尝试，不试怎么知道结果如何呢？这天下着大雨，晚上还有几场笔试，还好带了伞。走出大楼的时候遇到一个计算机学院的研究生学长，也是来面美团的，就一起回学校，顺便把他送回了宿舍。这个时候几场笔试都已经开始一段时间了，我就就近去参加了跟谁学的笔试，多试试总是好的。笔试题目都是与PHP相关的，有了暑期的实习经历，这些题目都不在话下，后来就接到了跟谁学的面试通知，也顺利拿到了offer，期间还拿到了tp-link的offer。此时也才到九月底，我拿到了三个offer，可以放松一下好好过个国庆节了。</p>
<p>后面我就没再继续找了，决定在已经拿到的三个offer里选一个，formax毕竟是霸面拿到的offer，没那么有归属感，tp-link平台虽然很大，也有在向互联网方向发展，但是还是有一点偏传统企业，约束太多，而跟谁学致力于互联网教育，是一家典型的互联网企业，很有前景，薪资福利都不错，还有其它的激励，最重要的一个原因是它要在武汉建立一个研发中心，去那边工作相当于从零开始，进步空间很大，学到的东西更多，而我以后打算创业，在这样的环境下工作对以后的创业（如果有机会的话）会很有帮助，再就是武汉离家近，也不像北上广深那样拥堵，那样压力大，就像跟谁学的CTO在面试我的时候说的，在武汉幸福感会很高（根据我后面去北京总部实习的经历来看，确实是这样，在北京每天上班挤地铁像战斗一般，有一次打个的本来半个小时的路程硬是走了一个多小时，虽然当时是包住宿，但是对高的离谱的房租也有所耳闻，而武汉则会好很多），于是就选择了去跟谁学，并且在11月份开始了在跟谁学的为期三个月的实习。</p>
<p>在这三个月里，我可以说见证了跟谁学的飞速发展，先是去北京实习，去的时候总部还是中关村软件园2号楼2308室，条件比较差，分配的导师和另一个同事分别向两边挪了挪，腾出一个位置作为我的工位，但是设备一流，人手一台Macbook Pro，我也不例外的发了一台，还有两件纪念衫，因为是t恤，到现在还没穿过。大家工作都很有干劲，我也不例外，当时虽然刚去北京感冒了，但依然阻挡不了我的热情，因为创业是一件如此让人热血澎湃的事！中午和晚上都有工作餐送过来，伙食也是一流。好吃的东西总能激励人更努力的做事，嗯。在这里待了一个星期左右，公司就搬到了新大楼，共有五层，装修高端大气上档次，我的工位安排在二楼一个靠窗的位置，阳光充足，可以边码代码边晒太阳，这在北京的冬天是极好的。就这样一直实习到12月上旬，因为学校新开了一门课，我就回武汉上课了。12月下旬的时候，跟谁学武汉研发中心就装修好了，我就直接到那边实习了。武研位于街道口百脑汇二期20楼，对面就是武大信息学部，在上面可以俯瞰武大信息学部全景，因为地段比较好，又是5A级写字楼，房租是光谷软件园的两倍，不得不说公司土豪==。CTO的说法是之所以选在这里，是不想被武汉当地的传统企业所同化，而要保持一个互联网创业公司的活力。事实也确实是这样，武研几乎是与北京总部保持同步，所有数据是共享的，网络互通，有电话会议可以随时与北京总部进行无障碍交流，装备也都是Macbook Pro，就连室内装修都是一样的，甚至比总部有过之而无不及，最重要的是武研研发人员有一半以上来自华科、武大（相当一部分是研究生）和百度的，这样硬件和人员配备，可以说在街道口，甚至是整个武汉地区都算是顶级互联网公司，在这样的公司上班自然是斗志满满，也更加坚定了在程序员这条路上走下去的信念。</p>
<p>中关村软件园2号楼2308室旧总部：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog%2F%E9%9D%9E%E5%85%B8%E5%9E%8B%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%8B%E8%B7%AF%2F%E6%97%A7%E6%80%BB%E9%83%A8.jpg" alt="旧总部"></p>
<p>博彦科技大厦新总部：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog%2F%E9%9D%9E%E5%85%B8%E5%9E%8B%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%8B%E8%B7%AF%2F%E6%80%BB%E9%83%A8%E5%A4%A7%E5%8E%A6.jpeg" alt="新总部大厦"><br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog%2F%E9%9D%9E%E5%85%B8%E5%9E%8B%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%8B%E8%B7%AF%2F%E6%80%BB%E9%83%A8%E4%BC%9A%E8%AE%AE%E5%AE%A4.jpeg" alt="新总部会议室"></p>
<p>街道口百脑汇二期20楼武汉研发中心：<br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog%2F%E9%9D%9E%E5%85%B8%E5%9E%8B%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%8B%E8%B7%AF%2F%E6%AD%A6%E6%B1%89%E7%A0%94%E5%8F%91%E4%B8%AD%E5%BF%83.jpg" alt="武汉研发中心"><br><img src="http://7xqk51.com1.z0.glb.clouddn.com/blog%2F%E9%9D%9E%E5%85%B8%E5%9E%8B%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%8B%E8%B7%AF%2F%E6%AD%A6%E7%A0%94%E9%BB%84%E9%B9%A4%E6%A5%BC%E4%BC%9A%E8%AE%AE%E5%AE%A4.jpg" alt="武研黄鹤楼会议室"></p>
<p>在武汉研发中心一直实习到16年二月底，在这期间收获颇多，在PHP、Phalcon框架、git、数据库、网络等知识上有了质的飞跃，也让我更加确定程序员是适合我的职业，可以专注于码代码而不受其它事情的羁绊，而且它是具有创造性的，每当看到自己写的东西顺利运行的时候都有一种满满的成就感。在实习期间我的工号是1962，这意味着我是第1962个加入跟谁学的，也是跟谁学第一批校招的员工之一，以后也算得上是元老级的员工了，这让我兴奋莫名。后来听说我们部门的同事有工号是两位数的，听起来让人羡慕不已，这才是真正元老级的人物，听他们说起公司成立之初炎炎夏日在北京五道口地下室光着膀子码代码的事情，就像听着一群英雄好汉一起打江山的荡气回肠的故事，让人热血澎湃，激动不已，创业真是一件让人向往的事！说不定有朝一日，我也会像他们一样，为创立一家新公司而奋不顾身。未来的事，谁又说的准呢？<br><img src="http://a3.att.hudong.com/64/20/01300000098168132125204980537.jpg" alt="i&#39;m a coder"></p>
]]></content>
      <tags>
        <tag>thoughts</tag>
        <tag>summary</tag>
      </tags>
  </entry>
  <entry>
    <title>用gdb调试C++进程段错误(segmentation fault)</title>
    <url>/2022/06/13/gdb-debug-segmentation-fault/</url>
    <content><![CDATA[<p>最近在开发一个C++项目的时候遇到了一个问题，进程跑了一段时间后突然退出了，并且报了一个段错误，记录下用gdb调试并定位问题的过程。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1]    21067 segmentation fault  ./bin/test_process</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>先看了下运行目录下没有生成core文件，一般机器默认不生成core文件（很多Linux发行版在默认时禁止生成核心文件），执行以下命令重新运行后生成了core文件<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ulimit -c unlimited</span><br></pre></td></tr></table></figure></p>
<p>运行以下命令进行gdb调试<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> gdb+进程+core文件</span><br><span class="line">gdb ./bin/test_process ./core.7455</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 或者gdb+进程，再执行run</span><br><span class="line">gdb ./bin/test_process</span><br><span class="line">run</span><br></pre></td></tr></table></figure></p>
<p>出现了以下报错信息：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">[Switching to Thread 0x7fffec133700 (LWP 8282)]</span><br><span class="line">0x00000000008e72ae in mbdstrgy::push::GroupProcessor::compute_score(std::shared_ptr&lt;mbdstrgy::push::OperatorPack&gt; const&amp;, std::shared_ptr&lt;mbdstrgy::push::TaskScore&gt;&amp;) (this=Unhandled dwarf expression opcode 0xf3</span><br><span class="line">) at test-group/test-process/src/group.cpp:266</span><br><span class="line">266	test-group/test-process/src/group.cpp: No such file or directory.</span><br><span class="line">	in test-group/test-process/src/group.cpp</span><br></pre></td></tr></table></figure></p>
<p>执行backtrace（或者bt）显示堆栈信息：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) backtrace</span><br><span class="line">#0  0x00000000008e72ae in mbdstrgy::push::GroupProcessor::compute_score(std::shared_ptr&lt;mbdstrgy::push::OperatorPack&gt; const&amp;, std::shared_ptr&lt;mbdstrgy::push::TaskScore&gt;&amp;) (this=Unhandled dwarf expression opcode 0xf3</span><br><span class="line">) at test-group/test-process/src/group.cpp:266</span><br><span class="line">#1  0x00000000008e7d1a in mbdstrgy::push::GroupProcessor::process() (this=0x33bde10) at test-group/test-process/src/group.cpp:334</span><br><span class="line">#2  0x00007ffff7df316f in ?? () from /opt/compiler/gcc-8.2/lib/libstdc++.so.6</span><br><span class="line">#3  0x00007ffff7fbeda4 in start_thread () at pthread_create.c:333</span><br><span class="line">#4  0x00007ffff7b5432d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109</span><br></pre></td></tr></table></figure></p>
<p>执行frame查看指定的帧（以#开头的行），由于源文件没有对应上，这里没有显示出具体的代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) frame 0</span><br><span class="line">#0  mbdstrgy::push::GroupProcessor::compute_score(std::shared_ptr&lt;mbdstrgy::push::OperatorPack&gt; const&amp;, std::shared_ptr&lt;mbdstrgy::push::TaskScore&gt;&amp;) (this=Unhandled dwarf expression opcode 0xf3</span><br><span class="line">) at test-group/test-process/src/group.cpp:265</span><br><span class="line">265	test-group/test-process/src/group.cpp: No such file or directory.</span><br><span class="line">	in test-group/test-process/src/group.cpp</span><br></pre></td></tr></table></figure></p>
<p>执行print+变量名可以查看当前context下某个变量的值，这里打印lr_strategy_ptr，发现是 0x0，是个空指针<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) print lr_strategy_ptr</span><br><span class="line">$1 = std::shared_ptr&lt;mbdstrgy::push::Strategy&gt; (empty) = &#123;</span><br><span class="line">  get() = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行backtrace full完全显示函数之间相互调用时传递的参数值和函数的内部变量值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) backtrace full</span><br><span class="line">#0  0x00000000008e72ae in mbdstrgy::push::GroupProcessor::compute_score(std::shared_ptr&lt;mbdstrgy::push::OperatorPack&gt; const&amp;, std::shared_ptr&lt;mbdstrgy::push::TaskScore&gt;&amp;) (this=Unhandled dwarf expression opcode 0xf3</span><br><span class="line">) at test-group/test-process/src/group.cpp:266</span><br><span class="line">        lr_strategy_ptr = std::shared_ptr&lt;mbdstrgy::push::Strategy&gt; (empty) = &#123;</span><br><span class="line">          get() = 0x0</span><br><span class="line">        &#125;</span><br><span class="line">        adjust_ptr = std::shared_ptr&lt;mbdstrgy::push::Rerank&gt; (empty) = &#123;</span><br><span class="line">          get() = 0x0</span><br><span class="line">        &#125;</span><br><span class="line">        unique_key = &lt;value optimized out&gt;</span><br><span class="line">        nid = &lt;value optimized out&gt;</span><br><span class="line">        taskid = &lt;value optimized out&gt;</span><br><span class="line">        score = 8.1749536922780693e-315</span><br><span class="line">        iter = &lt;value optimized out&gt;</span><br><span class="line">#1  0x00000000008e7d1a in mbdstrgy::push::GroupProcessor::process() (this=0x33bde10) at test-group/test-process/src/group.cpp:334</span><br><span class="line">        operator_pack = std::shared_ptr&lt;mbdstrgy::push::OperatorPack&gt; (use count 1, weak count 0) = &#123;</span><br><span class="line">          get() = 0x56d6ea50</span><br><span class="line">        &#125;</span><br><span class="line">        logeveryn_329 = 22891</span><br><span class="line">        logeveryn_sc_329 = 100</span><br><span class="line">        logeveryn_c_329 = &lt;value optimized out&gt;</span><br><span class="line">        new_task_score = std::shared_ptr&lt;mbdstrgy::push::TaskScore&gt; (use count 1, weak count 0) = &#123;</span><br><span class="line">          get() = 0x541d57b0</span><br><span class="line">        &#125;</span><br><span class="line">        count = 157</span><br><span class="line">#2  0x00007ffff7df316f in ?? () from /opt/compiler/gcc-8.2/lib/libstdc++.so.6</span><br><span class="line">No symbol table info available.</span><br><span class="line">#3  0x00007ffff7fbeda4 in start_thread () at pthread_create.c:333</span><br><span class="line">No symbol table info available.</span><br><span class="line">#4  0x00007ffff7b5432d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109</span><br><span class="line">No locals.</span><br></pre></td></tr></table></figure></p>
<p>可以看到frame 0里有两个空指针，对空指针进行操作导致了segmentation fault。结合日志，最后定位到原因是有个配置有问题引起的，至此问题得到解决。<br>这个问题其实在单测中可以发现，因此先单测通过再自测是个比较好的习惯。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/lidabo/p/4234360.html" target="_blank" rel="noopener">用gdb调试程序笔记: 以段错误(Segmental fault)为例</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>gdb</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次go语言debug调优实战</title>
    <url>/2021/03/27/golang-debug-optimize/</url>
    <content><![CDATA[<p>在开发一个go模块hermes的时候遇到了一个很诡异的问题，该系统的部分流程如下：<br><img src="/images/go-debug/hermes.png" alt="自动推送流程图"><br>hermes订阅了一个推送物料的MQ，由于要做小流量实验，通过一个Dispatcher将物料分成了两条流，分别写到不同的filter channel，Filter模块消费该channel并进行一些参数判断过滤，再写入store channel，Store模块消费该channel并通过redis去重，如果不重复则写入MySQL，并在redis里标记该物料已经处理过了，但是进程在跑了几分钟之后MQ订阅中止了，开始以为是测试环境MQ连接有问题，调试之后才发现是channel阻塞了。在这里记录下调试过程，包括Linux下常用调试命令free、ps、top、strace、pstack等和go的调试工具pprof的使用。</p>
<a id="more"></a>
<h2 id="1、Linux调试"><a href="#1、Linux调试" class="headerlink" title="1、Linux调试"></a>1、Linux调试</h2><h3 id="系统内存占用"><a href="#系统内存占用" class="headerlink" title="系统内存占用"></a>系统内存占用</h3><p>在确认不是MQ连接的问题之后，先是怀疑OOM了，用free看了下机器内存使用情况，从”-/+ buffers/cache”这一行可以看到能够挪用的内存还有9869M，不是OOM。<br><img src="/images/go-debug/free.jpg" alt="free结果"><br>查看日志也确认没有OOM信息：<br><img src="/images/go-debug/oom.jpg" alt="OOM日志"></p>
<h3 id="程序内存占用"><a href="#程序内存占用" class="headerlink" title="程序内存占用"></a>程序内存占用</h3><p>ps和top看下，占用的内存也并不高：<br><img src="/images/go-debug/ps.jpg" alt="ps"><br><img src="/images/go-debug/top.jpg" alt="ps"></p>
<h3 id="查看进程栈信息"><a href="#查看进程栈信息" class="headerlink" title="查看进程栈信息"></a>查看进程栈信息</h3><h2 id="2、go-pprof调试"><a href="#2、go-pprof调试" class="headerlink" title="2、go pprof调试"></a>2、go pprof调试</h2><p>在程序中加上pprof调试代码之后，查看goroutine堆栈信息，发现有一个异常信息：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goroutine 17 [chan send, 29 minutes, locked to thread]</span><br></pre></td></tr></table></figure></p>
<p>堆栈信息开始于MQ订阅，阻塞于Dispatcher写入filter channel的时候，而Filter模块只是进行参数的判断过滤，没有进行网络请求或者IO操作，应该处理的很快，那可能是下游的store channel阻塞了，因为Store模块会请求Redis和MySQL，有网络请求和IO操作，处理比较慢，而Store模块是串行处理store channel里的数据的。于是将Store改为并行处理store channel，读取channel里的数据之后用goroutine进行处理。同时将上下游channel的大小都从1024改为10240，提高channel容量，有更大的缓冲空间。改完重新编译运行，发现MQ消费不会中断了！问题得以解决。<br><img src="/images/go-debug/stack-trace.jpg" alt="stack-trace"></p>
<h2 id="3、附：Linux几个调试命令输出内容说明"><a href="#3、附：Linux几个调试命令输出内容说明" class="headerlink" title="3、附：Linux几个调试命令输出内容说明"></a>3、附：Linux几个调试命令输出内容说明</h2><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><img src="/images/go-debug/free.jpg" alt="free结果"></p>
<h4 id="输出结果对应字段说明"><a href="#输出结果对应字段说明" class="headerlink" title="输出结果对应字段说明"></a>输出结果对应字段说明</h4><ul>
<li>Mem：内存的使用情况</li>
<li>-/+ buffers/cache：表示物理内存已用多少，可用多少</li>
<li>Swap：交换空间的使用情况</li>
</ul>
<h4 id="关于buffers和cached的区别"><a href="#关于buffers和cached的区别" class="headerlink" title="关于buffers和cached的区别"></a>关于buffers和cached的区别</h4><ul>
<li>A buffer is something that has yet to be “written” to disk.</li>
<li>A cache is something that has been “read” from the disk and stored for later use.</li>
</ul>
<h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><ul>
<li>Mem<ul>
<li>total = used + free</li>
</ul>
</li>
<li>-/+ buffers/cache<ul>
<li>used = Mem used - Mem buffers - Mem cached</li>
<li>free = Mem free + Mem buffers + Mem cached</li>
</ul>
</li>
</ul>
<h3 id="ps-aux"><a href="#ps-aux" class="headerlink" title="ps aux"></a>ps aux</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><img src="/images/go-debug/ps.jpg" alt="ps"></p>
<h4 id="输出结果对应字段说明-1"><a href="#输出结果对应字段说明-1" class="headerlink" title="输出结果对应字段说明"></a>输出结果对应字段说明</h4><ul>
<li>USER：进程的所有者</li>
<li>PID：进程ID号</li>
<li>%CPU：CPU占用率 </li>
<li>%MEM：内存占用率</li>
<li>VSZ：虚拟内存使用量(单位KB)</li>
<li>RSS：占用的固定内存量(单位KB)</li>
<li>TTY：所在终端 </li>
<li>STAT：进程状态</li>
<li>START：被启动的时间</li>
<li>TIME：实际使用CPU的时间 </li>
<li>COMMAND：命令名称与参数</li>
</ul>
<h4 id="进程状态说明："><a href="#进程状态说明：" class="headerlink" title="进程状态说明："></a>进程状态说明：</h4><p>D    Uninterruptible sleep (usually IO)<br>R    Running or runnable (on run queue)<br>S    Interruptible sleep (waiting for an event to complete)<br>T    Stopped, either by a job control signal or because it is being traced.<br>W    paging (not valid since the 2.6.xx kernel)<br>X    dead (should never be seen)<br>Z    Defunct (“zombie”) process, terminated but not reaped by its parent.</p>
<p>For BSD formats and when the stat keyword is used, additional characters may be displayed:<br>&lt;    high-priority (not nice to other users)<br>N    low-priority (nice to other users)<br>L    has pages locked into memory (for real-time and custom IO)<br>s    is a session leader<br>l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)<br>+    is in the foreground process group</p>
<h2 id="4、参考"><a href="#4、参考" class="headerlink" title="4、参考"></a>4、参考</h2><p><a href="https://blog.csdn.net/ouyang_peng/article/details/84292776" target="_blank" rel="noopener">【Linux学习】Linux free 命令学习</a></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Go</tag>
        <tag>Pprof</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo生成的html文件为空问题解决</title>
    <url>/2022/06/12/hexo-generate-html-empty/</url>
    <content><![CDATA[<p>用hexo搭建了一个个人博客，最近在更新并上传到github之后发现上传的html文件都是空的，大小为0kb，本地的html文件也是空的，但是本地启动hexo server，访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 是正常的，在网上搜了不少解决方法，发现很多都解决不了问题，或者表述不清楚，踩了不少坑终于解决了，在这里记录一下。</p>
<a id="more"></a>
<h2 id="1、踩坑历程"><a href="#1、踩坑历程" class="headerlink" title="1、踩坑历程"></a>1、踩坑历程</h2><h3 id="1-1-node版本升级"><a href="#1-1-node版本升级" class="headerlink" title="1.1 node版本升级"></a>1.1 node版本升级</h3><p>我的node版本是14.xxx，看网上有些说需要把node升级到稳定版本，于是执行以下命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm i -g n</span><br><span class="line">sudo n stable</span><br></pre></td></tr></table></figure></p>
<p>此时发现node升级到了v16.15.1，删除原来的html文件重新生成，发现html还是空的<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p>
<h3 id="1-2-hexo-debug"><a href="#1-2-hexo-debug" class="headerlink" title="1.2 hexo debug"></a>1.2 hexo debug</h3><p>看有人说可以运行以下命令debug下看看有啥报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g --debug</span><br></pre></td></tr></table></figure></p>
<p>运行之后发现有三个地方有提示：</p>
<ul>
<li>报错1<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(node:37667) Warning: Accessing non-existent property &apos;lineno&apos; of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &apos;column&apos; of module exports inside circular dependency</span><br><span class="line">(node:37667) Warning: Accessing non-existent property &apos;filename&apos; of module exports inside circular dependency</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>找了下解决方案说是在node_modules/stylus/lib/nodes/index.js文件头部添加以下内容，添加之后还是不行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exports.lineno = null;</span><br><span class="line">exports.column = null;</span><br><span class="line">exports.filename = null;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>报错2<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Version 9 of Highlight.js has reached EOL and is no longer supported.</span><br><span class="line">Please upgrade or ask whatever dependency you are using to upgrade.</span><br><span class="line">https://github.com/highlightjs/highlight.js/issues/2877</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>把博客根目录下的package.json文件里的Highlight.js版本改为11.5.1，然后npm install，hexo重新生成还是不行</p>
<ul>
<li>报错3<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">16:56:02.362 WARN  ===============================================================</span><br><span class="line">16:56:02.362 WARN  ========================= ATTENTION! ==========================</span><br><span class="line">16:56:02.362 WARN  ===============================================================</span><br><span class="line">16:56:02.362 WARN   NexT repository is moving here: https://github.com/theme-next</span><br><span class="line">16:56:02.363 WARN  ===============================================================</span><br><span class="line">16:56:02.363 WARN   It&apos;s rebase to v6.0.0 and future maintenance will resume there</span><br><span class="line">16:56:02.363 WARN  ===============================================================</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这个是hexo的NexT主题代码迁移提示，不升级暂时也没问题</p>
<h3 id="1-3-正解：node版本降级"><a href="#1-3-正解：node版本降级" class="headerlink" title="1.3 正解：node版本降级"></a>1.3 正解：node版本降级</h3><p>最后发现是node版本太高，hexo不支持，需要把node版本改为v12.xxx版本，注意不是大于v12就行，于是把node版本改为v12.22.12后解决问题。我用的是Mac，通过brew安装的node，于是执行以下命令重新安装node v12：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew search node # 查找node可安装的版本，发现有node@12</span><br><span class="line">brew uninstall node # 卸载原node</span><br><span class="line">brew install node@12 # 安装新node</span><br></pre></td></tr></table></figure></p>
<h2 id="2、参考"><a href="#2、参考" class="headerlink" title="2、参考"></a>2、参考</h2><p><a href="https://blog.tcs-y.com/2020/04/26/hexo-index-0kb/" target="_blank" rel="noopener">解决hexo generate 生成的时候index.html为0kb空白的问题</a><br><a href="https://blog.csdn.net/qq_45865697/article/details/121892998" target="_blank" rel="noopener">hexo deploy上传github全是空白文件问题解决</a></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/404.html</url>
    <content><![CDATA[<html>
<head></head>
<body>
<iframe scrolling="no" frameborder="0" src="https://yibo.iyiyun.com/Home/Distribute/ad404/key/1131755" width="654" height="470" style="display:block; margin: auto"></iframe>
</body>
</html>
]]></content>
  </entry>
  <entry>
    <title>about</title>
    <url>/about/index.html</url>
    <content><![CDATA[<h2 id="brief"><a href="#brief" class="headerlink" title="brief"></a>brief</h2><ul>
<li>我觉得最好的人生状态，是追求踮踮脚才能够到的东西。像我们这么倔强的家伙，有想做的事，有喜欢的人，就算再够呛，也得试试啊。</li>
<li>毕业于华中科技大学，先后在小米、滴滴和百度搬砖，涉及增长、推送、推荐等方向。</li>
<li>精通Go、C++和Python的拼写。</li>
</ul>
<h2 id="contact"><a href="#contact" class="headerlink" title="contact"></a>contact</h2><ul>
<li><a href="mailto:zuolicong@foxmail.com" target="_blank" rel="noopener">zuolicong@foxmail.com</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>All categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>All tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
